It should be possible to add ssh support to console telnet, as console telnet has a very modular design when it comes to the networking code.  There is already support for pipes, and if there exists an ssh client for Win32 that will output to stdout, then you're in business.  I'm yet to find such a client, but if one existed, an SSH session could be started like so:

C:\> telnet
Copyright message, license.txt, stuff, etc.
telnet> set io_netpipe "C:\BIN\SSH.EXE -l username host"
telnet> open blah
login:
password:

Unfortunately, all the ssh clients I've found don't work this way.  You can output CMD.EXE to telnet this way, though, and get a very pretty ansi interpreter.  If you want to try to get OpenSSH working, here's step-by-step instructions to get you started (please read them all the way though):

1) Get Perl from http://www.activestate.com/ActivePerl/download.htm
2) Get Openssl from http://www.openssl.org/source/
   - Follow directions in INSTALL.W32
   - Copy the .LIB files from OUT32DLL to your LIB directory (C:\DevStudio\VC\LIB)
   - Copy the .DLL files from OUT32DLLto your system directory (C:\Winnt\System32 or C:\Windows\System)
   - Copy the .H files from INC32\OPENSSL to your include\ssl (C:\DevStudio\VC\include\ssl)
   - Copy these same files to include\openssl (C:\DevStudio\VC\include\openssl)
3) Get Openssh from http://www.openssh.com
4) Modify Openssh so it will compile, and get rid of all the termios stuff

Obviously this is a lot of work.  If you need a good ssh client, try PuTTY from https://www.chiark.greenend.org.uk/~sgtatham/putty/ .  It may be possible to integrate PuTTY and Telnet, and that would certainly be easier than the above option.  PuTTY is licensed under the MIT license, which seems to be compatible with the GPL.  The primary advantage of integrating the two projects is that PuTTY would gain the key mappings that telnet has, and telnet would gain encryption.
