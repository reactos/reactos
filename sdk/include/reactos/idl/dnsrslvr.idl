/*
 * DNS Resolver Service interface definition
 */

#include <ms-dtyp.idl>

#define UNICODE
#include <sal.h>

cpp_quote("#ifndef _WINDNS_INCLUDED_")
#include <windns.h>
cpp_quote("#endif")
cpp_quote("#ifndef _WINDNS_UNDOC_H_")
#include <windns_undoc.h>
cpp_quote("#endif")

typedef [handle, string] LPWSTR DNSRSLVR_HANDLE;

[
    uuid(45776b01-5956-4485-9f80-f428f7d60129),
    version(2.0),
    pointer_default(unique)
#ifndef __midl
    ,explicit_handle
#endif
]

interface DnsResolver
{
    /* Function: 0x00 */
    DWORD
    __stdcall
    CRrReadCache(
        [in, unique, string] DNSRSLVR_HANDLE pwszServerName,
        [out] DNS_CACHE_ENTRY **ppCacheEntries);

    /* Function: 0x01 */
    /* CRrReadCacheEntry */

    /* Function: 0x02 */
    /* CRrGetHashTableStats */

    /* Function: 0x03 */
    /* R_ResolverGetConfig */

    /* Function: 0x04 */
    DWORD
    __stdcall
    R_ResolverFlushCache(
        [in, unique, string] DNSRSLVR_HANDLE pwszServerName);

    /* Function: 0x05 */
    DWORD
    __stdcall
    R_ResolverFlushCacheEntry(
        [in, unique, string] DNSRSLVR_HANDLE pwszServerName,
        [in, string] LPCWSTR pszName,
        [in] WORD wType);

    /* Function: 0x06 */
    /* R_ResolverRegisterCluster */

    /* Function: 0x07 */
    DWORD
    __stdcall
    R_ResolverQuery(
        [in, unique, string] DNSRSLVR_HANDLE pwszServerName,
        [in, unique, string] LPCWSTR pwsName,
        [in] WORD wType,
        [in] DWORD Flags,
        [in, out] DWORD *dwRecords,
        [out] DNS_RECORDW **ppResultRecords);

    /* Function: 0x08 */
    /* R_ResolverEnumCache */

    /* Function: 0x09 */
    /* R_ResolverPoke */

}
