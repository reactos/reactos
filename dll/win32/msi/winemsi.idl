/*
 * Copyright (C) 2007 James Hawkins
 * Copyright (C) 2018 Zebediah Figura
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#pragma makedep header
#pragma makedep client
#pragma makedep server

import "objidl.idl";

cpp_quote("#if 0")
typedef unsigned long MSIHANDLE;
typedef int INSTALLMESSAGE;
typedef int MSICONDITION;
typedef int MSIRUNMODE;
typedef int INSTALLSTATE;
typedef int MSICOLINFO;
typedef int MSIMODIFY;
typedef int MSICOSTTREE;
typedef int MSIDBERROR;

#define MSIFIELD_NULL   0
#define MSIFIELD_INT    1
#define MSIFIELD_WSTR   3
#define MSIFIELD_STREAM 4
cpp_quote("#endif")
cpp_quote("#include \"msiquery.h\"")

struct wire_field {
    unsigned int type;
    [switch_is(type)] union {
        [case(MSIFIELD_NULL)] ;
        [case(MSIFIELD_INT)] int iVal;
        [case(MSIFIELD_WSTR), string] LPWSTR szwVal;
        [case(MSIFIELD_STREAM)] IStream *stream;
    } u;
    int len;
};

/* compatible with MSIRECORD minus header */
struct wire_record {
    unsigned int count;
    UINT64 cookie;
    [size_is(count+1)] struct wire_field fields[];
};

[
    uuid(56D58B64-8780-4c22-A8BC-8B0B29E4A9F8),
    implicit_handle(handle_t rpc_handle)
]
interface IWineMsiRemote
{
    UINT remote_ViewClose( [in] MSIHANDLE view );
    UINT remote_ViewExecute( [in] MSIHANDLE view, [in, unique] struct wire_record *record );
    UINT remote_ViewFetch( [in] MSIHANDLE view, [out] struct wire_record **record );
    UINT remote_ViewGetColumnInfo( [in] MSIHANDLE view, [in] MSICOLINFO info, [out] struct wire_record **record );
    MSIDBERROR remote_ViewGetError( [in] MSIHANDLE view, [out, string] LPWSTR *column );
    UINT remote_ViewModify( [in] MSIHANDLE view, [in] MSIMODIFY mode,
        [in] struct wire_record *record, [out] struct wire_record **refreshed );

    MSICONDITION remote_DatabaseIsTablePersistent( [in] MSIHANDLE db, [in] LPCWSTR table );
    UINT remote_DatabaseGetPrimaryKeys( [in] MSIHANDLE db, [in, string] LPCWSTR table, [out] struct wire_record **keys );
    UINT remote_DatabaseGetSummaryInformation( [in] MSIHANDLE db, [in] UINT updatecount, [out] MSIHANDLE *suminfo );
    UINT remote_DatabaseOpenView( [in] MSIHANDLE db, [in, string] LPCWSTR query, [out] MSIHANDLE *view );

    UINT remote_SummaryInfoGetPropertyCount( [in] MSIHANDLE suminfo, [out] UINT *count );
    UINT remote_SummaryInfoGetProperty( [in] MSIHANDLE suminfo, [in] UINT property, [out] UINT *type, [out] INT *value,
                                        [out] FILETIME *ft, [out, string] LPWSTR *buf );

    MSIHANDLE remote_GetActiveDatabase( [in] MSIHANDLE hinst );
    UINT remote_GetProperty( [in] MSIHANDLE hinst, [in, string] LPCWSTR property, [out, string] LPWSTR *value, [out] DWORD *size );
    UINT remote_SetProperty( [in] MSIHANDLE hinst, [in, string, unique] LPCWSTR property, [in, string, unique] LPCWSTR value );
    int remote_ProcessMessage( [in] MSIHANDLE hinst, [in] INSTALLMESSAGE message, [in] struct wire_record *record );
    UINT remote_DoAction( [in] MSIHANDLE hinst, [in, string] LPCWSTR action );
    UINT remote_Sequence( [in] MSIHANDLE hinst, [in, string] LPCWSTR table, [in] int sequence );
    UINT remote_GetTargetPath( [in] MSIHANDLE hinst, [in, string] LPCWSTR folder, [out, string] LPWSTR *value );
    UINT remote_SetTargetPath( [in] MSIHANDLE hinst, [in, string] LPCWSTR folder, [in, string] LPCWSTR value );
    UINT remote_GetSourcePath( [in] MSIHANDLE hinst, [in, string] LPCWSTR folder, [out, string] LPWSTR *value );
    BOOL remote_GetMode( [in] MSIHANDLE hinst, [in] MSIRUNMODE mode );
    UINT remote_SetMode( [in] MSIHANDLE hinst, [in] MSIRUNMODE mode, [in] BOOL state );
    UINT remote_GetFeatureState( [in] MSIHANDLE hinst, [in, string] LPCWSTR feature, [out] INSTALLSTATE *installed, [out] INSTALLSTATE *action );
    UINT remote_SetFeatureState( [in] MSIHANDLE hinst, [in, string] LPCWSTR feature, [in] INSTALLSTATE state );
    UINT remote_GetComponentState( [in] MSIHANDLE hinst, [in, string] LPCWSTR component, [out] INSTALLSTATE *installed, [out] INSTALLSTATE *action );
    UINT remote_SetComponentState( [in] MSIHANDLE hinst, [in, string] LPCWSTR component, [in] INSTALLSTATE state );
    LANGID remote_GetLanguage( [in] MSIHANDLE hinst );
    UINT remote_SetInstallLevel( [in] MSIHANDLE hinst, [in] int level );
    UINT remote_FormatRecord( [in] MSIHANDLE hinst, [in] struct wire_record *record, [out, string] LPWSTR *value);
    MSICONDITION remote_EvaluateCondition( [in] MSIHANDLE hinst, [in, string] LPCWSTR condition );
    UINT remote_GetFeatureCost( [in] MSIHANDLE hinst, [in, string] LPCWSTR feature, [in] MSICOSTTREE cost_tree, [in] INSTALLSTATE state, [out] INT *cost );
    UINT remote_EnumComponentCosts( [in] MSIHANDLE hinst, [in, string, unique] LPCWSTR component, [in] DWORD index, [in] INSTALLSTATE state,
                                    [out, string, size_is(3)] LPWSTR drive, [out] INT *cost, [out] INT *temp );

    UINT remote_GetActionInfo( [in] const GUID *guid, [out, string] WCHAR **action, [out] int *type, [out, string] WCHAR **dllname,
                               [out, string] char **function, [out] MSIHANDLE *hinst );
    UINT remote_CloseHandle( [in] MSIHANDLE handle );
}
